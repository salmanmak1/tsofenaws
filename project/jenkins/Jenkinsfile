import jenkins.model.*

pipeline {
    //agent { docker { image 'python:3.10.7-alpine' } }
    agent { docker { image 'eamonwoortman/alpine-python-curl-zip' } }
    
    stages {
        stage('Pre Build') {
            steps {
                echo 'Pre Build'
                echo "GITHUB_PR_NUMBER=${env.GITHUB_PR_NUMBER}"
                echo "GITHUB_PR_STATE=${env.GITHUB_PR_STATE}"
                echo "GITHUB_PR_SHORT_DESC=${env.GITHUB_PR_SHORT_DESC}"
                echo "GITHUB_PR_TITLE=${env.GITHUB_PR_TITLE}"
                echo "GITHUB_PR_URL=${env.GITHUB_PR_URL}"
                echo "GITHUB_PR_SOURCE_BRANCH=${env.GITHUB_PR_SOURCE_BRANCH}"
                echo "GITHUB_PR_TARGET_BRANCH=${env.GITHUB_PR_TARGET_BRANCH}"
                sh 'python --version'
                sh 'pwd'
            }
        }        
        stage('Checkout Code') {
            steps {
                echo 'Code is already checked out'
            }
        }
        stage('Build and Run Code') {
            steps {
                dir('project/code')
                {
                    sh 'ls'
                    sh 'python *.py'
                }
            }
        }
        stage('Run Unit Tests') {
            steps {
                dir('project/tests')
                {
                    sh 'ls'
                    sh 'python *.py'
                }
            }
        }
        stage('Run Sonar to catch Clean Code issues') {
            steps {
                echo 'TODO: Sonar not implemented yet'
            }
        }
        stage('Run Security Checks to catch vulnerability inside Dependencies') {
            steps {
                echo 'TODO: Security Checks inside Dependencies not implemented yet'
            }
        }
        stage('Run Security Checks to catch vulnerability inside Code') {
            steps {
                echo 'TODO: Security Checks inside Code not implemented yet'
            }
        }
    }
    
    post { 
        success {
            script {
                echo 'Build Passed. Now going to merge to upstream...'
                if (env.GITHUB_PR_NUMBER) {
                    echo 'Add successful comment to PR via github API'
                    withCredentials([string(credentialsId: 'github_token', variable: 'GITHUB_TOKEN')]) {
                        sh """
                        curl -s -X POST -H "Authorization: token ${GITHUB_TOKEN}" --data '{"body": "PR Jenkins Build Passed"}' https://api.github.com/repos/salmanmak1/tsofenaws/issues/${GITHUB_PR_NUMBER}/comments
                        """
                    }
                    
                    echo 'Approve PR via github API'
                    withCredentials([string(credentialsId: 'github_token', variable: 'GITHUB_TOKEN')]) {
                        sh """
                        curl -s -X POST -H "Authorization: token ${GITHUB_TOKEN}" --data '{"body":"Pull Request Approved after passing jenkins build","event":"APPROVE"}' https://api.github.com/repos/salmanmak1/tsofenaws/pulls/${GITHUB_PR_NUMBER}/reviews
                        """
                    }
                    
                    echo 'Merge PR via github API'
                    withCredentials([string(credentialsId: 'github_token', variable: 'GITHUB_TOKEN')]) {
                        sh """
                        curl -s -X PUT -H "Authorization: token ${GITHUB_TOKEN}" --data '{"commit_title":"Merged by system","commit_message":"Merged after passing jenkins build"}' https://api.github.com/repos/salmanmak1/tsofenaws/pulls/${GITHUB_PR_NUMBER}/merge
                        """
                    }
                }
            }
        }
        failure {
            script {
                echo 'Build Failed. Merge will be rejected...'
                if (env.GITHUB_PR_NUMBER) {
                    echo 'Add failure comment to PR via github API'
                    withCredentials([string(credentialsId: 'github_token', variable: 'GITHUB_TOKEN')]) {
                        sh """
                        curl -s -X POST -H "Authorization: token ${GITHUB_TOKEN}" --data '{"body": "PR Jenkins Build Failed"}' https://api.github.com/repos/salmanmak1/tsofenaws/issues/${GITHUB_PR_NUMBER}/comments
                        """
                    }
                    
                    echo 'Reject PR and Request changes via github API'
                    withCredentials([string(credentialsId: 'github_token', variable: 'GITHUB_TOKEN')]) {
                        sh """
                        curl -s -X POST -H "Authorization: token ${GITHUB_TOKEN}" --data '{"body":"Pull Request Rejected after jenkins build failure","event":"REQUEST_CHANGES"}' https://api.github.com/repos/salmanmak1/tsofenaws/pulls/${GITHUB_PR_NUMBER}/reviews
                        """
                    }
                }
            }
        }
    }
}
